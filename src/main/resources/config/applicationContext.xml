<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	 xmlns:cache="http://www.springframework.org/schema/cache"
     xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/cache  http://www.springframework.org/schema/cache/spring-cache.xsd">
	<context:property-placeholder location="classpath:application.properties" ignore-unresolvable="true"/>
	<context:component-scan base-package="com.ypwh.cron.msg" />
	<context:component-scan base-package="com.ypwh.cron.msg.service.impl" />
	
	<context:component-scan base-package="com.ypwh.cron.user" />
	<context:component-scan base-package="com.ypwh.cron.reduction" />
	
	<import resource="classpath:config/kafkaConsumer.xml" />
	<import resource="classpath:config/kafkaProducer.xml" />
	
		<!-- AOP动态切换 -->
	<bean id="dataSourceAspect" class="com.ypwh.db.DataSourceAspect" />
	<aop:config>
		<aop:aspect id="aspect" ref="dataSourceAspect">
			<aop:pointcut id="service"
				expression="execution(* com.ypwh.*.*.service.*.*(..))" />
			<aop:before pointcut-ref="service" method="before" />
		</aop:aspect>
	</aop:config>
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
	<!--master -->
	<bean id="siteWrite" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${site.jdbc.url}" />
		<property name="username" value="${site.jdbc.username}" />
		<property name="password" value="${site.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.minIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<property name="filters" value="stat,wall" />

	</bean>
	<bean id="siteRead" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${site.read.jdbc.url}" />
		<property name="username" value="${site.read.jdbc.username}" />
		<property name="password" value="${site.read.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.minIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<property name="filters" value="stat,wall" />

	</bean>
	<bean id="arriveBonTopicNew" class="com.ypwh.cron.msg.service.impl.AbonTopicServiceImpl"/>
	<bean id="arriveRedTopicNew" class="com.ypwh.cron.msg.service.impl.AredTopicServiceImpl"/>
	<bean id="awardTopic" class="com.ypwh.cron.msg.service.impl.AwardTopicServiceImpl"/>
	<bean id="exppBonTopicNew" class="com.ypwh.cron.msg.service.impl.EbonTopicServiceImpl"/>
	<bean id="exppRedTopicNew" class="com.ypwh.cron.msg.service.impl.EredTopicServiceImpl"/>
	<bean id="getAwardTopic" class="com.ypwh.cron.msg.service.impl.GetAwardTopicServiceImpl"/>
	<bean id="getCodeRedTopic" class="com.ypwh.cron.msg.service.impl.GetCodeTopicServiceImpl"/>
	<bean id="getFriTopic" class="com.ypwh.cron.msg.service.impl.GetFriTopicServiceImpl"/>
	<bean id="noRegisterTopic" class="com.ypwh.cron.msg.service.impl.NoRegisterTopicServiceImpl"/>
	<bean id="comsumerService" class="com.ypwh.cron.msg.service.impl.ComsumerServiceImpl"/>
	<bean id="getRegCodeTopic" class="com.ypwh.cron.msg.service.impl.GetRedCodeTopicServiceImpl"/>
	<bean id="baifendianTopic" class="com.ypwh.cron.msg.service.impl.BaifendianTopicServiceImpl"/>


	<bean id="chuDaService" class="com.ypwh.cron.chuda.service.impl.ChuDaServiceImpl"/>

	<bean id="wall" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
	</bean>
	<!-- 慢sql 300ms -->
	<bean id="stat" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="300" />
		<property name="logSlowSql" value="true" />
	</bean>
	
	<!--可选，动态数据源配置 -->
    <bean id="dynamicDataSource" class="com.ypwh.db.DynamicDataSource">
      <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <entry value-ref="siteWrite" key="${site.jdbc.datasource.name}"></entry>  
                <entry value-ref="siteRead" key="${site.read.jdbc.datasource.name}"></entry>  
            </map>  
        </property> 
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dynamicDataSource" />  
		  <property name="configLocation" value="classpath:/config/mybatis-config.xml" />
		  <property name="mapperLocations" value="classpath*:com/ypwh/cron/**/dao/*.xml"/>
    </bean>
   <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ypwh.cron.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- Spring的声明式事务管理 -->
	<!-- 设置与事务有关的各种属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 声明切入点 -->
	<!-- 自动创建事务代理 -->
	<aop:config>
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.ypwh.*.*.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>
</beans>
